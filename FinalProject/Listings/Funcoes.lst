C51 COMPILER V9.60.0.0   FUNCOES                                                           11/17/2021 17:42:16 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE FUNCOES
OBJECT MODULE PLACED IN .\Objects\Funcoes.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Funcoes.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\F
                    -uncoes.lst) TABS(2) OBJECT(.\Objects\Funcoes.obj)

line level    source

   1          #include "PID.h"
   2          /*
   3          float pid(int error_ctrl, int prev_error_ctrl, int kp, int ki, int kd)
   4          {
   5           double p = 0, i = 0, d = 0;
   6           float sum = 0;
   7           p = kp * error_ctrl;
   8           i = ki * (error_ctrl + prev_error_ctrl); 
   9           d = kd * (error_ctrl - prev_error_ctrl);
  10           sum = p + i +d; // PID
  11          return sum;
  12          } 
  13          */
  14          void lcd_init()
  15          { // Inicia LCD
  16   1        unsigned char config[] = {0x38,0x0c,0x01,0x80};
  17   1        unsigned int i;
  18   1        for (i=0; i<4;i++){lcd_comm(config[i]);}
  19   1        lcd_data("Sistema iniciado");
  20   1      }
  21          
  22          void lcd_comm (char dado) 
  23          { // envia flags de controle para o LCD
  24   1        lcd_bus = dado;
  25   1        delay_ms(10);
  26   1        RS = 0;
  27   1        delay_ms(10);
  28   1        EN = 1;
  29   1        delay_ms(10);
  30   1        EN = 0;
  31   1        delay_ms(10);
  32   1        return;
  33   1      }
  34          
  35          void lcd_data (char dado[])
  36          { // envia o dado para o barramento do lcd
  37   1        int i;
  38   1        int len;
  39   1        len = strlen(dado);
  40   1        for (i=0;i<len;i++){
  41   2          lcd_bus = dado[i];
  42   2          delay_ms(5);
  43   2          RS = 1;
  44   2          delay_ms(5);
  45   2          EN = 1;
  46   2          delay_ms(5);
  47   2          EN = 0;
  48   2        }
  49   1      }
  50          
  51          void delay_ms (unsigned ms)
  52          { 
  53   1      
  54   1        unsigned int i,j;
C51 COMPILER V9.60.0.0   FUNCOES                                                           11/17/2021 17:42:16 PAGE 2   

  55   1        for (i=0;i<ms;i++){    
  56   2          for (j=0;j<65;j++){_nop_();}  
  57   2          }
  58   1        }
  59          void lcd_clear()
  60          {
  61   1        lcd_comm(0x01);
  62   1      }
  63          
  64          void exibe (int number) // Recebe número e decresce de 155
  65          {
  66   1        char aux[3];
  67   1        //lcd_comm(0xc7);
  68   1        sprintf(aux,"%d",(number-155));
  69   1          lcd_data(aux);
  70   1          delay_ms(5);
  71   1        return;
  72   1      }
  73          // Interrupção externa 0
  74          void INT_EX0 (void) interrupt 0{ // Inicia ou reseta
  75   1        if (start == 0){//Inicia contagem
  76   2          start = 1;
  77   2        }else if (start == 1){  // permite resetar
  78   2          start = 0;
  79   2        }
  80   1      }
  81          
  82          //Sensor Functions
  83          char s_write_byte (unsigned char value)
  84          { 
  85   1        // Manda um byte para o sensor e verifica se foi reconhecido 
  86   1        unsigned char i, erro=0;
  87   1        for (i=0x80;i>0;i/=2){         // Shift bit para mascarar value
  88   2          if (i & value) {DATA=1;}     // utilizando i para efetuar uma mascara em value 
  89   2          else DATA = 0;
  90   2          _nop_();
  91   2          SCK = 1;                     //coloca clock em nivel alto
  92   2          _nop_();                     //pulswith approx. 5 us
  93   2          _nop_();
  94   2          _nop_();
  95   2          SCK =0;                      //baixa nivel clock
  96   2          _nop_();
  97   2        }
  98   1        DATA =1;                       //libera linha de dados
  99   1        _nop_();
 100   1        SCK = 1;                       //9º clock para ack
 101   1        erro = DATA;                   //checa ack (dados serão retirados pelo sensor)
 102   1        SCK = 0;
 103   1        return erro;                   //erro=1 em caso de não reconhecimento
 104   1      }
 105          
 106          char s_read_byte (unsigned char ack)
 107          {
 108   1        unsigned char i,val=0;
 109   1        DATA = 1;                 //Libera a linha de dados puxando para 1. 
 110   1        for (i=0x80;i>0;i/=2){    // Bit de mudança para efetuar mascara
 111   2          SCK =1;                 // clock do sensor
 112   2          if (DATA){val =(val | i);} //le o bit
 113   2          SCK = 0;
 114   2        }
 115   1        DATA=!ack;              // caso ack == 1 puxa para nivel baixo a linha de dados.
 116   1        _nop_();
C51 COMPILER V9.60.0.0   FUNCOES                                                           11/17/2021 17:42:16 PAGE 3   

 117   1        SCK = 1;
 118   1        _nop_();
 119   1        _nop_();
 120   1        _nop_();
 121   1        SCK = 0;
 122   1        _nop_();
 123   1        DATA=1;
 124   1        return val;             // retorna bit que foi lido
 125   1      }
 126          
 127          void s_transstart(void)
 128          {
 129   1      // Gera o início da transmissão
 130   1      //       _____         ________
 131   1      // DATA:      |_______|
 132   1      //           ___     ___
 133   1      // SCK : ___|   |___|   |______ 
 134   1        DATA=1;
 135   1        SCK=0;
 136   1        _nop_();
 137   1        SCK=1;
 138   1        _nop_();
 139   1        DATA=0;
 140   1        _nop_();
 141   1        SCK=0;
 142   1        _nop_();
 143   1        _nop_();
 144   1        _nop_();
 145   1        SCK=1;
 146   1        _nop_();
 147   1        DATA=1;
 148   1        _nop_();
 149   1        SCK=0;
 150   1      }
 151          void s_connectionreset(void)
 152          {
 153   1      //----------------------------------------------------------------------------------
 154   1      // reset comunicação com sensor: DATA-line=1 e pelo menos 9 ciclos em SCK seguido pelo inicio da transmiss
             -ão
 155   1      //       _______________________________________________________________________         ________
 156   1      // DATA:                                                                        |_______|
 157   1      //          ___    ___    ___    ___    ___    ___    ___    ___    ___        ___     ___      
 158   1      // SCK : __|   |__|   |__|   |__|   |__|   |__|   |__|   |__|   |__|   |______|   |___|   |______
 159   1      
 160   1        unsigned char i;
 161   1        DATA=1; SCK=0;      //Estado inicial para reset
 162   1        for(i=0;i<9;i++){  //Efetua os 9 ciclos em SCK
 163   2          SCK=1;
 164   2          SCK=0;
 165   2        }
 166   1        s_transstart(); //Inicia Transmissão
 167   1      }
 168          char s_measure(unsigned char *p_value,unsigned char *p_checksum, unsigned char mode)
 169          {
 170   1      //----------------------------------------------------------------------------------
 171   1      // faz a medição da umidade e temperatura usando checksum 
 172   1      
 173   1        unsigned char error=0;
 174   1        unsigned int i;
 175   1        s_transstart();                           //Start da comunicaçã
 176   1        switch(mode){                             //seleciona qual medição vai fazer e envia para sensor sensor
 177   2          case TEMP : error+=s_write_byte(med_temp); break;
C51 COMPILER V9.60.0.0   FUNCOES                                                           11/17/2021 17:42:16 PAGE 4   

 178   2          case HUMI : error+=s_write_byte(med_umi); break;
 179   2          default : break;
 180   2        }
 181   1        for (i=0;i<65535;i++){
 182   2          if(DATA==0) break; //Aguarda Sensor terminar medição, quando sensor finaliza a medição puxa data para ze
             -ro.
 183   2        }
 184   1        if(DATA) {error+=1;}             //Ou caso o tempo limite (proximo de 2 seg) é atingido
 185   1        *(p_value)  = s_read_byte(ACK);    //le o primeiro byte(MSB)
 186   1        *(p_value+1)= s_read_byte(ACK);   //le o segundo byte(LSB)
 187   1        *p_checksum = s_read_byte(noACK); //le checksum para indicar final de dados.
 188   1        return error; 
 189   1      }
 190          void calc_sth11(float *p_humidity, float *p_temperature )
 191          { 
 192   1      //----------------------------------------------------------------------------------
 193   1      // Calculos de temperatura [°C] e umidade [%RH]
 194   1      // entrada : umidade [Ticks] (12 bit)
 195   1      // temp [Ticks] (14 bit)
 196   1      // retorna: umi [%RH]
 197   1      // retorna: temp [°C]
 198   1        const float C1=  -2.0468;                   // for 12 Bit RH
 199   1        const float C2=  0.0367;                    // for 12 Bit RH
 200   1        const float C3=  -0.0000015955;             // for 12 Bit RH
 201   1        const float T1= 0.1;                        // for 12 Bit RH
 202   1        const float T2= 0.00008;                    // for 12 Bit RH
 203   1        float rh = *p_humidity;                     // rh: umidade 12 Bit
 204   1        float t = *p_temperature;                   // t: temperatura 14 Bit
 205   1        float rh_lin;                               // rh_lin: umidade linear
 206   1        float rh_true;                              // rh_true: umidade compensada pela temperatura
 207   1        float t_C;                                  // t_C : temperatura [°C]
 208   1        t_C=t*0.01 - 40.1;                          //calc. temperatura [°C]from 14 bit temp.ticks @5V
 209   1        rh_lin=C3*rh*rh + C2*rh + C1;               //calc. umidade para interação para [%RH]
 210   1        rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;         //calc. umidade compensada pela temperatura [%RH]
 211   1      
 212   1        if(rh_true>100){rh_true=100;} // Trata dos limites aceitaveis 
 213   1        if(rh_true<0.1){rh_true=0.1;} //
 214   1        *p_temperature=t_C; //Retorna o valor da temperatura [%RH]
 215   1        *p_humidity=rh_true; //Retorna o valor da umidade [%RH]
 216   1      }
 217          float medidor()
 218          {
 219   1      //----------------------------------------------------------------------------------
 220   1      // Utilizando SHT75 para medir umidade e temperatura, temperatura usada para calculo de precisão da umidad
             -e
 221   1      // 1. Reseta a conexão com o sensor
 222   1      // 2. mede a umidade (12 bit) e temperatura(14 bit)
 223   1      // 3. Calcula a umidade[%RH] e a temperatura [°C]
 224   1      // 4. Mostra no LCD o valor medido em %
 225   1          value umi_val,temp_val;
 226   1          unsigned char error,checksum;
 227   1          //unsigned int i;
 228   1          char dado[5];
 229   1          //SCON = 0x52;
 230   1          //TMOD = 0x35;
 231   1          //TCON = 0x69;
 232   1          //TH1 =  0xfd; 
 233   1          s_connectionreset();
 234   1          _nop_();
 235   1          _nop_();
 236   1          _nop_();
 237   1          _nop_();
C51 COMPILER V9.60.0.0   FUNCOES                                                           11/17/2021 17:42:16 PAGE 5   

 238   1          error=0;
 239   1          error+=s_measure((unsigned char*) &temp_val.i,&checksum,TEMP);// medição de temp; 
 240   1          error+=s_measure((unsigned char*) &umi_val.i,&checksum,HUMI); //medição de umidade
 241   1          if(error!=0){
 242   2            s_connectionreset(); 
 243   2            umi_val.f = 404;
 244   2          }                           //Caso tenha algum erro reseta a coneção
 245   1          else{
 246   2            umi_val.f=(float)umi_val.i;                                //converte inteiro em float
 247   2            temp_val.f=(float)temp_val.i;                              //converte inteiro em float
 248   2            calc_sth11(&umi_val.f,&temp_val.f);                        //calcula umidade
 249   2            sprintf(dado,"%0.1f",umi_val.f);
 250   2            lcd_comm(0x80);
 251   2            delay_ms(5);
 252   2            lcd_data("Umidade:");
 253   2            _nop_();
 254   2            lcd_comm(0x88);                                            // Colocar posição que vai ser mostrado no 
             -LCD
 255   2            _nop_();
 256   2            lcd_data(strcat(dado,"%"));
 257   2          }
 258   1            
 259   1            
 260   1      /*----------wait approx. 0.8s to avoid heating up SHTxx-----------------------------
 261   1           for (i=0;i<40000;i++){i=i;} //(be sure that the compiler doesn't eliminate this line!)
 262   1      ----------------------------------------------------------------------------------*/
 263   1          return(umi_val.f);
 264   1      }
 265          
 266          void ISR_Timer1(void) interrupt 3
 267          {
 268   1        flics =TL0 * 20;
 269   1        TF1 = 0;
 270   1        
 271   1        TH0 = 0x00;
 272   1        TL0 = 0x00;
 273   1        
 274   1        TH1 = 0x4B;
 275   1        TL1 = 0xFF;
 276   1        TR1 = 1;
 277   1        TR0 = 1;
 278   1      }
 279          
 280          
 281          void contaRPS(void)
 282          {
 283   1        IE = 0x89; // 0x88 = 1000 1000 mudar para 0x89 que é 1000 1001
 284   1        
 285   1        TMOD = 0x15;  //0011 0101
 286   1        TH0 = 0x00;
 287   1        TL0 = 0x00;
 288   1        TH1 = 0x4B;
 289   1        TL1 = 0xff;
 290   1        TR1 = 1;
 291   1        TR0 = 1;
 292   1        
 293   1      }
 294          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1307    ----
C51 COMPILER V9.60.0.0   FUNCOES                                                           11/17/2021 17:42:16 PAGE 6   

   CONSTANT SIZE    =     41    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      85
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
